version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: shinewardrobe-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: shinewardrobe-backend
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - WEATHER_API_KEY=${WEATHER_API_KEY}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - NODE_ENV=production
      - PORT=${BACKEND_PORT}
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${BACKEND_PORT}/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: shinewardrobe-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:${BACKEND_PORT}
      - NODE_ENV=production
    ports:
      - "${FRONTEND_PORT}:3000"
    depends_on:
      - backend
    restart: unless-stopped

  webscraper:
    build:
      context: ./webscraper
      dockerfile: Dockerfile
    container_name: shinewardrobe-scraper
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SCRAPER_SCHEDULE=${SCRAPER_SCHEDULE}
      - SCRAPER_MAX_PRODUCTS=${SCRAPER_MAX_PRODUCTS}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  default:
    name: shinewardrobe-network